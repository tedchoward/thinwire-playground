class ImageChooser extends Panel {
    public static final String PROPERTY_IMAGE_SELECTED = "imageSelected";
    
    private Image selectedImage;
    private Map<String, Image> imageMap;
    private int imgHeight;
    
    private ActionListener imageClickListener = new ActionListener() {
        public void actionPerformed(ActionEvent ev) {
            setSelectedImage((Image) ev.getSource());
        }
    };
    
    ImageChooser() {
        setHeight(100);
        setScrollType(ImageChooser.ScrollType.AS_NEEDED);
        getStyle().getBackground().setColor(Color.WINDOW);
        imgHeight = 0;
        imageMap = new HashMap<String, Image>();
        Widget[] values = Widget.values();
        addImage(Main.RES_PATH + "File.png");
        addImage(Main.RES_PATH + "Folder.png");
    }
    
    void addImage(String fileName) {
        Image img = new Image(fileName);
        img.setPosition(5, imgHeight + 5);
        if (getInnerWidth() < img.getWidth()) setWidth(img.getWidth() + 10);
        imgHeight += 5 + img.getHeight();
        img.addActionListener(Image.ACTION_CLICK, imageClickListener);
        getChildren().add(img);
        imageMap.put(img.getImage(), img);
        setSelectedImage(img);
    }
    
    public void setSelectedImage(Image selectedImage) {
        Image oldImage = this.selectedImage;
        if (oldImage != null) oldImage.getStyle().getBackground().setColor(Color.TRANSPARENT);
        this.selectedImage = selectedImage;
        this.selectedImage.getStyle().getBackground().setColor(Color.HIGHLIGHT);
        firePropertyChange(this, PROPERTY_IMAGE_SELECTED, oldImage, this.selectedImage);
    }
    
    public Image getSelectedImage() {
        return selectedImage;
    }
    
    public Image getImage(String imageName) {
        return imageMap.get(imageName); 
    }
}

public class DropDownImageChooser extends DropDown<ImageChooser> {
    
    private static class DefaultView extends DropDown.AbstractView<ImageChooser> {
        
        void init(DropDownImageChooser ddic, ImageChooser ic) {
            super.init(ddic, ic);
            List<Component> kids = ddc.getChildren();
            for (Component c : kids) {
                if (c instanceof Image) {
                    Image img = (Image) c;
                    addCloseComponent(img);
                }
            }
            ddc.addPropertyChangeListener(ImageChooser.PROPERTY_IMAGE_SELECTED, 
            	new PropertyChangeListener() {
                
                public void propertyChange(PropertyChangeEvent ev) {
                    dd.setText(getValue().toString());
                }
            });
        }

        public DropDown<ImageChooser> getDropDown() {
            return (DropDownImageChooser)dd;
        }

        public int getOptimalHeight() {
            return ddc.getHeight();
        }

        public Object getValue() {
            return ddc.getSelectedImage().getImage();
        }

        public void setValue(Object value) {
            String s;
            if (value == null) {
                s = "";
            } else if (value instanceof String) {
                s = (String) value;
            } else {
                s = value.toString();
            }
            ddc.setSelectedImage(ddc.getImage(s));
        }
        
    }

    DropDownImageChooser() {
        super(new DefaultView(), new ImageChooser());
        ((DefaultView) getView()).init(this, getComponent());
    }
}